#### Question 1 ####

	CONSTRUCT { ?s ?p ?o } WHERE { ?s ?p ?o }

-> Constructs the graph.

#### Question 2 ####

1.

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	select * where { ?x a ?t . filter(strstarts(?t, h:)) }

The query prints all the Subject-Predicate tuples which start with the URI
h: <http:// ...

We get 21 answers.

2.

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	select * where { ?x ?p ?o . FILTER(CONTAINS(?x, "John")) }

John is of type Person with complete URI:

	<http://www.inria.fr/2007/09/11/humans.rdfs#Person

#### Question 3 ####

<http://www.inria.fr/2007/09/11/humans.rdfs-instances#John

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	CONSTRUCT { ?s ?p ?o } where { ?s ?p ?o . FILTER(CONTAINS(?s, "John")) }

#### Question 4 ####

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	select * where { ?x h:hasSpouse ?y }

Prints all the hasSpouse relations in the graph. I.e. All people with a
spouse.

We get 5 answers.

#### Question 5 ####

1.

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
        select * where { ?x h:shoesize ?y }

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	select ?x ?o where { ?x rdf:type h:Person .
		             ?x h:shoesize ?o . }

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	select ?x ?o where { ?x a h:Person ; h:shoesize ?o . }

2.

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	select ?x ?o where { ?x a h:Person .	#a is the shortcut for rdf:type
	                     ?x h:shoesize? ?o . }

3.

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	select ?x ?o ?o2 where { ?x a h:Person .
	  	           ?x h:shoesize? ?o . filter ( xsd:integer(?o) >= 8 )
                           ?x h:shirtsize? ?o2 . filter (xsd:integer(?o2) >= 12) }

#### Question 6 ####

1.

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	select ?x where { ?x h:hasChild ?o . }

5 responses, 2 duplicates with Gaston.

2. 

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	select distinct ?x where { ?x h:hasChild ?o . }

4 answers

3.

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	select ?x where { ?x a h:Person . filter not exists { ?x h:hasChild ?o }}

#### Question 7 ####

1.

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	select ?x ?o where {  ?x rdf:type h:Person ;
                              h:age ?o . filter (?o >=18 ) }

3 answers.

2. 

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
        ask { ?x a h:Person ; 
                     h:age ?o1 ;
                     h:name ?o2 . filter(CONTAINS(?o2, "Mark")) .
               filter ( xsd:integer(?o1) >= 18 ) }

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	ask { 
	  ?x h:name "Mark" .
	  ?x h:age ?age .
	  filter ( xsd:integer(?age>=18) )
	}

3.

prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
select ?x ?o (xsd:decimal(?o/2)-xsd:integer(?o/2)!=0 as ?o2)
where {  
  ?x h:age ?o .
}

#### Question 8 ####

1.

prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
CONSTRUCT { ?friend h:hasFriend ?person . }
WHERE { 
        ?person h:hasFriend ?friend 
}

2. 

        prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	INSERT { ?friend h:hasFriend ?person . }
	WHERE {
	    ?person h:hasFriend ?friend
	}


# will give different results before and after

        prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	select ?person ?friend where {
	    ?person h:hasFriend ?friend
	}

#### Question 9 ####

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	CONSTRUCT { ?x h:ageIsEven ?o2 . }
	WHERE {
	    select ?x ?o (xsd:decimal(?o/2)-xsd:integer(?o/2)!=0 as ?o2)
	    where {
	        ?x h:age ?o .
	    }
	}

#### Question 10 ####

edit the file a la mano.

#### Question 11 ####

1.

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>

	select distinct ?name ?shirt ?name2 ?shirt2 where {
	  ?x h:shirtsize ?shirt
	  ?x2 h:shirtsize ?shirt2
	  ?x h:name ?name
	  ?x2 h:name ?name2
	  filter (?shirt = ?shirt2 && ?x!=?x2)
	}

2.

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>

	construct { ?x rdfs:seeAlso ?x2 . } 
	where {
	  ?x h:shirtsize ?shirt 
	  ?x2 h:shirtsize ?shirt
	  filter (?x!=?x2)
	}

# check relation

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>

	construct { ?x ?p ?x2 . } 
	where {
	  ?x ?p ?x2
	  ?x h:shirtsize ?shirt 
	  ?x2 h:shirtsize ?shirt
	  filter (?x!=?x2)
	}

3.

        prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	insert { ?x rdfs:seeAlso ?x2 . }
	where {
	  ?x h:shirtsize ?shirt
	  ?x2 h:shirtsize ?shirt
	  filter (?x!=?x2)
	}

4.

        prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	select * where {
	  ?x rdfs:seeAlso ?x2
	}

	construct {?x  rdfs:seeAlso ?x2} where {
	  ?x rdfs:seeAlso ?x2
	}

5. 

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>

	select distinct ?x ?x2 where {
	  ?x h:shoesize ?s
	  ?x2 h:shoesize ?s
	  filter (?x!=?x2)
	}

	insert {?x rdfs:seeAlso ?x2} where {
	  ?x h:shoesize ?s
	  ?x2 h:shoesize ?s
	  filter (?x!=?x2)
	}

6.

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>

	construct {?x rdfs:seeAlso ?x2} where {
	  ?x h:shoesize ?s
	  ?x2 h:shoesize ?s
	  filter (?x!=?x2)
	}

7.

        prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
	construct {?x rdfs:seeAlso ?x2} where {
	  ?x rdfs:seeAlso ?x2
	}

8.

reload and rerun

System -> Reload

#### Question 12 ####

1.

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>

	select (MAX(?size) as ?maxSize) where {
	  ?x h:shoesize ?size
	}

2.

	prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>

	select ?name where {
	  ?x h:name ?name
	  ?x h:shoesize ?size .
	}
	having ( ?size = MAX(?size) ) 

3.

        prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>

        select (AVG(?size) as ?avgSize) where {
          ?x h:shoesize ?size
        }

4.

        prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>

        select ((SUM(?size)/COUNT(?size)) as ?avgSize) where {
          ?x h:shoesize ?size
        }


#### Question 13 ####

        prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>

        select ?x ?spouse where {
          ?x h:hasChild ?o ;
              h:hasSpouse ?spouse .
        }

#### Question 14 ####

@prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
@prefix in: <http://www.inria.fr/2007/09/11/humans.rdfs-instances#>

INSERT DATA
{
  in:TEST h:name "TEST" ;
     h:hasChild in:A ;
     h:hasSpouse in:B ;
     h:shoesize 7 ;
     h:age 19 ;
     h:shirtsize 42 .
}

#### Question 15 ####

        prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
        insert {?x rdfs:seeAlso ?o . } 
        where {
          {?x h:hasParent ?o .}
           UNION {
           ?x h:hasChild ?o .}
           UNION {
           ?x h:hasMother ?o .}
           UNION {
           ?x h:hasFather ?o .}
        }

	CONSTRUCT { ?s rdfs:seeAlso ?o } WHERE { ?s rdfs:seeAlso ?o }

#### Question 16 ####

It constructs a graph of 20 couples, which partners/spouses are referenced in
the dpegia database.


prefix db: <http://dbpedia.org/ontology/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
construct { ?x h:name ?nx . ?y h:name ?ny . ?x h:hasSpouse ?y }
where {
service <http://fr.dbpedia.org/sparql/> {
select * where {
?x db:spouse ?y .?x foaf:name ?nx .?y foaf:name ?ny .}
limit 20} }



prefix db: <http://dbpedia.org/ontology/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix h: <http://www.inria.fr/2007/09/11/humans.rdfs#>
@prefix in: <http://www.inria.fr/2007/09/11/humans.rdfs-instances#>

INSERT { GRAPH <http://www.inria.fr/2007/09/11/humans.rdfs-instances#>  {
    ?x rdf:type in:Person .
    ?y rdf:type in:Person .
    ?x h:name ?nx . 
    ?y h:name ?ny . 
    ?x h:hasSpouse ?y }}
where {
service <http://fr.dbpedia.org/sparql/> {
	select * where {
	?x db:spouse ?y .?x foaf:name ?nx .?y foaf:name ?ny .}
	limit 20} 
}

